#include "WebControl.h"

void WebControl::initTimerPage() {
  timerPage = String(R"rawliteral(
<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Time Progress Bar</title><style>body{overflow:hidden;display:flex;justify-content:center;align-items:center;height:100vh;margin:0;font-family:Arial,sans-serif}.progress-circle-container{display:flex;flex-direction:column;align-items:center}.progress-circle{width:200px;height:200px;position:relative}.progress-circle svg{width:100%;height:100%;transform:rotate(-90deg)}.progress-circle circle{fill:none;stroke-width:10}.progress-circle .bg{stroke:#f3f3f3}.progress-circle .progress{stroke:#76c7c0;stroke-linecap:round}.time-display{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:24px}.start-button{margin-top:20px;padding:10px 20px;font-size:16px;cursor:pointer;background-color:#76c7c0;border:none;color:#fff;border-radius:5px}.no-scroll{overflow:hidden}</style></head><body ontouchmove="event.preventDefault()"><div class="progress-circle-container"><div class="progress-circle" id="progress-circle"><svg><circle cx="100" cy="100" r="90" class="bg"></circle><circle cx="100" cy="100" r="90" class="progress"></circle></svg><div class="time-display" id="time-display">00:00</div></div><button class="start-button" id="start-button">Start Countdown</button></div><script>const maxTime=120;const minUnit=5;const progressCircle=document.querySelector('.progress-circle .progress');const timeDisplay=document.getElementById('time-display');const startButton=document.getElementById('start-button');const radius=progressCircle.r.baseVal.value;const circumference=2*Math.PI*radius;let currentTime=0;let isDragging=false;let countdownInterval=null;let countdownStarted=false;progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;progressCircle.style.strokeDashoffset = circumference;function setProgress(minutes){const offset=circumference-(minutes/maxTime)*circumference;progressCircle.style.strokeDashoffset=offset;const displayMinutes=String(Math.floor(minutes)).padStart(2,'0');const displaySeconds=String(Math.floor((minutes*60)%60)).padStart(2,'0');timeDisplay.textContent=`${displayMinutes}:${displaySeconds}`}function calculateTimeFromPosition(x,y){const bbox=progressCircle.getBoundingClientRect();const cx=bbox.left+bbox.width/2;const cy=bbox.top+bbox.height/2;const dx=x-cx;const dy=y-cy;const angle=Math.atan2(dy,dx)*(180/Math.PI)+90;const adjustedAngle=(angle<0)?angle+360:angle;const time=(adjustedAngle/360)*maxTime;return Math.round(time/minUnit)*minUnit}function handleDrag(e){if(countdownStarted)return;const x=e.clientX||(e.touches&&e.touches[0].clientX);const y=e.clientY||(e.touches&&e.touches[0].clientY);if(isDragging){const time=calculateTimeFromPosition(x,y);setProgress(time);currentTime=time}}document.getElementById('progress-circle').addEventListener('mousedown',(e)=>{if(countdownStarted)return;isDragging=true;handleDrag(e)});document.addEventListener('mousemove',handleDrag);document.addEventListener('mouseup',()=>{if(!countdownStarted)isDragging=false});document.getElementById('progress-circle').addEventListener('touchstart',(e)=>{if(countdownStarted)return;isDragging=true;handleDrag(e)});document.addEventListener('touchmove',handleDrag);document.addEventListener('touchend',()=>{if(!countdownStarted)isDragging=false});function preventTouchScroll(e){e.preventDefault()}function startCountdown(){if(countdownStarted)return;countdownStarted=true;document.body.classList.add('no-scroll');document.addEventListener('touchmove',preventTouchScroll,{passive:false});if(countdownInterval)clearInterval(countdownInterval);countdownInterval=setInterval(()=>{if(currentTime<=0){clearInterval(countdownInterval);return}currentTime-=1/60;setProgress(currentTime)},1000)}startButton.addEventListener('click',startCountdown);setProgress(currentTime);</script></body></html>
)rawliteral");
}